/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.Timer;
import java.util.TimerTask;

import yahoofinance.YahooFinance;
import yahoofinance.Stock;

public class App {
    private final ConcurrentLinkedQueue<StockData> stockDataQueue;
    private static final String TICKER = "^DJI"; // Dow Jones Industrial Average ticker
    private static final long UPDATE_INTERVAL = 60000; // 1 minute in milliseconds

    public App() {
        this.stockDataQueue = new ConcurrentLinkedQueue<>();
    }

    private static class StockData {
        private final BigDecimal price;
        private final LocalDateTime timestamp;

        public StockData(BigDecimal price, LocalDateTime timestamp) {
            this.price = price;
            this.timestamp = timestamp;
        }

        @Override
        public String toString() {
            return String.format("Price: %s, Timestamp: %s", price, timestamp);
        }
    }

    private void fetchAndStoreStockPrice() {
        try {
            Stock stock = YahooFinance.get(TICKER);
            if (stock != null && stock.getQuote() != null) {
                BigDecimal price = stock.getQuote().getPrice();
                LocalDateTime timestamp = LocalDateTime.now();
                
                StockData data = new StockData(price, timestamp);
                stockDataQueue.offer(data);
                
                System.out.println("New data added: " + data);
                System.out.println("Queue size: " + stockDataQueue.size());
            } else {
                System.err.println("Unable to fetch stock data for " + TICKER);
            }
        } catch (Exception e) {
            System.err.println("Error fetching stock price: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        App app = new App();
        
        // Create a timer to fetch stock price every 5 seconds
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                app.fetchAndStoreStockPrice();
            }
        }, 0, UPDATE_INTERVAL);

        // Keep the application running
        try {
            Thread.currentThread().join();
        } catch (InterruptedException e) {
            System.err.println("Application interrupted: " + e.getMessage());
        }
    }
}
